<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1230661_parking.ScriptedRestParkingRequestValidation</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ScriptedRestParkingRequestValidation</name>
        <script><![CDATA[var ScriptedRestParkingRequestValidation = Class.create();
ScriptedRestParkingRequestValidation.prototype = {
    initialize: function() {
        this.SPECIAL_CHARS = /[`!@#$%^&*()_\-+=\[\]{};':"\\|.<>\/?~]/;
        this.parkingErrorUtils = new ScriptedRestParkingErrorUtils();
		this.PARKING_REQUEST_FIELD_MAP = {
            reqNumber: "number",
            requestor: "requested_by.user_name",
            parking: "parking_name.name",
            status: "approve_status",
            plateNumber: "plate_number",
            date: "reservation_date",
            details: "additional_details",
            rejection: "rejection_reason"
        };
    },

    /**
     * Validates GET getList params for Parking reauests
     * 
     * @params {Object} params
     * 
     */
    validateGetListQueryParams: function(params) {

        let userSysId = "";
        let parkingSysId = "";

        for (let key in params) {
            switch (key) {

                case "userId":
                    if (params[key][0].trim() === "") {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "User id passed but value is empty!"));
                    }

                    if (this.SPECIAL_CHARS.test(params[key][0])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "User id can't contain special characters. Only number and letters."));
                    }

                    const userGr = new GlideRecordSecure("sys_user");
                    userGr.addQuery("user_name", params[key]);
                    userGr.setLimit(1);
                    userGr.addActiveQuery();
                    userGr.query();
                    if (!userGr.next()) {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "User does not exist with this id!"));
                    } 
                    break;

                case "request_date":
                    if (params[key].toString().trim() === "") {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Request date passed but is empty!"));
                    }

                    if (new Date(params[key][0]) === "Invalid Date") {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Invalid value in date query parama passed!"));
                    }

                    break;

                case "parking_name":
                    if (params[key].toString().trim() === "") {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Parking name passed but is empty!"));
                    }

                    if (this.SPECIAL_CHARS.test(params[key])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Parking name can't contain special characters. Only letters and numbers!"));
                    }

                    const parkingGr = new GlideRecordSecure("x_1230661_parking_list");
                    parkingGr.addQuery("name", params[key]);
                    parkingGr.setLimit(1);
                    parkingGr.addActiveQuery();
                    parkingGr.query();
                    if (!parkingGr.next()) {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "There is no parking with this name!"));
                    }
                    break;

                case "limit":
                    if (isNaN(limit)) {
                        throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid parameter.", "Limit can be only number!"));
                    }
                    break;
				
				default:
					break;
            }
        }
    },

    /**
     * Validates GET request number is not empty or is invalid with special characters for single read reacord
     * 
     * @param {string} requestNumber 
     */
    validateGetParkingReqParam: function(requestNumber) {

        if (this.SPECIAL_CHARS.test(requestNumber)) {
            throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid parameter!", "Request number can consist only from numbers and letters!"));
        }

        if (requestNumber.toString().trim() === "") {
            throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid parameter!", "Request number can't be empty!"));
        }

    },

    /**
     * Validates query params for GET single request record
     * 
     * @param {object} param
     * 
     * @return {array}
     */
    validateGetParkingReqQueryParam: function(param) {
       

        if (this.SPECIAL_CHARS.test(param.fields)) {
            throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Fields can't contain special characters. Only letters."));
        }

        const queryFieldsArray = param.fields[0].split(",");

        if (queryFieldsArray.length > Object.keys(this.PARKING_REQUEST_FIELD_MAP).length) {
            throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Fields query param contains in-valid data."));
        }

        for (let i = 0; i < queryFieldsArray.length; i++) {
            if (!this.PARKING_REQUEST_FIELD_MAP[queryFieldsArray[i]]) {
                throw (this.parkingErrorUtils.buildErrorResponse(404, "Invalid query parameter.", "Invalind field value passed in query parameter: fields."));
            }
        }

        return queryFieldsArray;
    },

	


    type: 'ScriptedRestParkingRequestValidation'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-26 11:35:49</sys_created_on>
        <sys_id>1a2d99514783021086ea87fe016d43e2</sys_id>
        <sys_mod_count>94</sys_mod_count>
        <sys_name>ScriptedRestParkingRequestValidation</sys_name>
        <sys_package display_value="parking" source="x_1230661_parking">2cd57ac74742021086ea87fe016d43c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="parking">2cd57ac74742021086ea87fe016d43c4</sys_scope>
        <sys_update_name>sys_script_include_1a2d99514783021086ea87fe016d43e2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-28 14:19:44</sys_updated_on>
    </sys_script_include>
</record_update>
