<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1230661_parking.ScriptedRestParkingUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Script include for Scripted rest apis related to Parking table, for handling response logic.</description>
        <mobile_callable>false</mobile_callable>
        <name>ScriptedRestParkingUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var ScriptedRestParkingUtils = Class.create();
ScriptedRestParkingUtils.prototype = {
    initialize: function() {
        this.PARKING_LIST_TABLE = 'x_1230661_parking_list';
        this.PARKING_FIELD_VALUE_MAP = {
            "parkingName": "name",
            "parkingLocation": "location",
            "parkingSlots": "parking_places",
            "parkingValid": "active"
        };
    },

    /**
     * Fetching parking record by provided number
     * 
     * @param {string} number
     * 
     * @return {{number: string, name: string, location: string, parking_places: number}}
     */
    buildParkingResponse: function(number) {
        const parkingTableGr = new GlideRecordSecure(this.PARKING_LIST_TABLE);
        parkingTableGr.addQuery("number", number);
        parkingTableGr.addQuery("active", true);
        parkingTableGr.setLimit(1);
        parkingTableGr.query();

        if (parkingTableGr.next()) {
            const responseBody = {
                "parkingNumber": parkingTableGr.number.toString(),
                "parkingName": parkingTableGr.name.toString(),
                "parkingLocation": parkingTableGr.location.toString(),
                "parkingSlots": parkingTableGr.parking_places
            };

            return {
                status: 202,
                body: responseBody
            };
        }


        return {
            status: 202,
            body: {
                "Details": "No parking found by this number."
            }
        };
    },

    /**
     * Builds respone for readlist for all active parkings.
     * 
     * Set limit at the moment for 50 parkings. Can be changed. Additionaly name field is indexed.
     * 
     * @return {Array.<{number: string, name: string, location: string, parking_places: number}>}
     */
    buildParkingListResponse: function() {
        const resultArray = [];

        const parkingListGr = new GlideRecordSecure(this.PARKING_LIST_TABLE);
        parkingListGr.addQuery("active", true);
        parkingListGr.setLimit(50);
        parkingListGr.orderBy("name");
        parkingListGr.query();

        while (parkingListGr.next()) {
            const parkingObj = {
                "parkingNumber": parkingListGr.number.toString(),
                "parkingName": parkingListGr.name.toString(),
                "parkingLocation": parkingListGr.location.toString(),
                "parkingSlots": parkingListGr.parking_places
            };

            resultArray.push(parkingObj);
        }

        return resultArray;
    },

    /**
     * Creates new parking record
     * 
     * @param {string} parkingName
     * @param {string} parkingLocation
     * @param {number} parkingSlots
     * 
     * @return {{message: string}}
     */
    createNewParking: function(parkingName, parkingLocation, parkingSlots) {
        const parkingErrorUtils = new ScriptedRestParkingErrorUtils();

        const parkingRecordInit = new GlideRecordSecure(this.PARKING_LIST_TABLE);
        parkingRecordInit.initialize();
        parkingRecordInit.name = parkingName;
        parkingRecordInit.location = parkingLocation;
        parkingRecordInit.parking_places = parkingSlots;
        parkingRecordInit.active = true;

        const newParkingSysId = parkingRecordInit.insert();

        if (!newParkingSysId) {
            throw (parkingErrorUtils.buildErrorResponse(400, "Something went wrong.", "New parking was not created!"));
        }

        return {
            message: `New parking was created: ${parkingRecordInit.number}!`
        };
    },

	/**
	 * @param {string} parkingNumber
	 * @param {object} requestData
	 * 
	 * @return {{parkingNumber: string, parkingName: string, parkingLocation: string, parkingSlot: string}}
	 */
    updateParkingRecord: function(parkingNumber, requestData) {
		const parkingErrorUtils = new ScriptedRestParkingErrorUtils();

        const parkingRecordGr = new GlideRecordSecure("x_1230661_parking_list");
        parkingRecordGr.addQuery("number", parkingNumber);
        parkingRecordGr.setLimit(1);
        parkingRecordGr.query();

        if (parkingRecordGr.next()) {

            for (let key in this.PARKING_FIELD_VALUE_MAP) {
                if (requestData[key]) {
                    let fieldName = this.PARKING_FIELD_VALUE_MAP[key];
                    parkingRecordGr.setValue(fieldName, requestData[key]);
                    parkingRecordGr.update();
                }
            }

            return {
                parkingNumber: parkingRecordGr.number.toString(),
                parkingName: parkingRecordGr.name.toString(),
                parkingLocation: parkingRecordGr.location.toString(),
                parkingSlots: parkingRecordGr.parking_places.toString()
            };
        }

		throw (parkingErrorUtils.buildErrorResponse(404, "No parking.", "No parking was found by this number!"));
    },

    type: 'ScriptedRestParkingUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-18 09:02:27</sys_created_on>
        <sys_id>2d0d2b6647fa421086ea87fe016d43bf</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>ScriptedRestParkingUtils</sys_name>
        <sys_package display_value="parking" source="x_1230661_parking">2cd57ac74742021086ea87fe016d43c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="parking">2cd57ac74742021086ea87fe016d43c4</sys_scope>
        <sys_update_name>sys_script_include_2d0d2b6647fa421086ea87fe016d43bf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-19 07:33:49</sys_updated_on>
    </sys_script_include>
</record_update>
