<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($scope) {
  let c = this;
  c.initialData = c.data.closestReservation;
  const dialog = document.querySelector("dialog");

  c.openModal = () => dialog.showModal();

  /**
   *Set select request into canceled state
   * @param {string} id
   */
  c.cancelReservation = (id) => {
    const serverRequest = {};
    serverRequest.action = "parking_rejection";
    serverRequest.id = id;
    c.server
      .get(serverRequest)
      .then(function (response) {
        c.initialData = response.data.newReservation;
      })
      .catch((error) => {
        console.error("Something went wrong with cancelReservation: " + error);
      });
  };

  /*Listens when form submition happens on requestform widget and then updates list*/
  $scope.$on("requestCreated", function (event, data) {
    c.initialData = data;
  });
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.reservation {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin: 0;

  .reservation__notfound {
    color: $text-color-black-1;
    font-style: italic;
    animation: animateFromTop 0.2s ease-in forwards;
  }

  .reservation__item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;

    box-shadow: inset 0 0rem 0.1rem rgba($text-color-black-1, 0.5);
    padding: 1.5rem 3rem;
    border-radius: 0.4rem;
    cursor: pointer;
    transition: box-shadow 0.15s ease-in;

    animation: animateFromTop 0.2s ease-in forwards;

    @media only screen and (max-width: 510px) {
      padding: 0.5rem 1rem;
    }

    &amp;:hover,
    &amp;:focus-within {
      box-shadow: inset 0 0rem 1rem rgba($background-color-blue-1, 1);
    }
    &amp;:hover .reservation__item-link,
    &amp;:focus-within .reservation__item-link {
      color: $text-color-active-1;
    }

    .reservation__item-link {
      display: flex;
      align-items: center;
      gap: 2rem;
      color: $text-color-black-1;
      font-weight: 600;
      font-size: clamp(1.25rem, 2.5vw, 1.55rem);
      transition: color 0.15s ease-in;
    }

    .reservation__item-cancel {
      color: $text-color-black-1;
      border: none;
      font-weight: 600;
      font-size: clamp(0.9rem, 2.5vw, 1.25rem);
      border-radius: 1.5rem;
      padding: 0.5rem 1rem;
      box-shadow: 0 0 0 0.1rem $red-color-1;
      transition: box-shadow 0.15s ease-in, color 0.15s ease-in,
        letter-spacing 0.15s ease-in;

      &amp;:hover,
      &amp;:focus {
        box-shadow: 0 0 0 0.1rem $red-color-1,
          inset 0 0rem 2rem rgba($red-color-1, 1);
        color: $text-color-active-1;
        letter-spacing: 1px;
      }
    }
  }
}

.actions {
  display: flex;

  @media only screen and (max-width: 510px) {
    flex-direction: column;
  }

  .primary-btn {
    @include btn-mixin(
      $bakcground-color-blue-2,
      $white-color-1,
      $background-color-blue-1
    );
    animation: animateFromBottom 0.2s ease-in forwards;
  }

  .secondary-btn {
    @include btn-mixin($text-color-black-1, $green-color-1, $green-color-2);
    animation: animateFromBottom 0.2s ease-in forwards;
  }
}

dialog {
  display: none;
  opacity: 0;
  margin: auto;
  border: none;
  padding: 1rem 2rem;
  border-radius: 1rem;
  box-shadow: 0 0 1rem $background-color-blue-1;
  background: transparent;
  min-width: 25%;
  width: 40rem;

  /*Works in 75% browsers*/
  translate: 0 25vh;
  transition-property: overlay display opacity;
  transition-duration: 0.5s;
  transition-behavior: allow-discrete;
}

dialog[open] {
  opacity: 1;
  display: block;
  border: none;
  translate: 0 0;

  /*Works in 75% browsers*/
  @starting-style {
    opacity: 0;
    translate: 0 -25vh;
  }

  &amp;::backdrop {
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(0.5rem);
    -webkit-backdrop-filter: blur(0.5rem);
  }

  .dialog__heading {
    color: $white-color-1;
    margin-bottom: 1rem;
    font-size: clamp(2rem, 2.5vw, 2.5rem);
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>parking_reservations</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>parking_reservations</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
  //Load data on initial render
  getClosestReservation();
	data.currentUserSysId = gs.getUserID();

  if (input && input.action === "parking_rejection") {
    //User cancels reservation

    const requestId = input.id;

    const parkingRequestGr = new GlideRecord("x_1230661_parking_requests");
    parkingRequestGr.get(requestId);
    parkingRequestGr.approve_status = "canceled";
    parkingRequestGr.update();
    data.newReservation = getClosestReservation();
  }

  /********************************************HELPER FUNCTIONS***************************** */
  function getClosestReservation() {
    const parkingRequestGr = new GlideRecord("x_1230661_parking_requests");
    parkingRequestGr.addQuery("requested_by", gs.getUserID());
    parkingRequestGr.addQuery("approve_status", "approved");
    parkingRequestGr
      .addQuery("reservation_date", gs.beginningOfToday())
      .addOrCondition("reservation_date", ">", gs.beginningOfToday());
    parkingRequestGr.setLimit(1);
    parkingRequestGr.orderBy("reservation_date");
    parkingRequestGr.query();

    if (parkingRequestGr.next()) {
      return (data.closestReservation = {
        date: parkingRequestGr.reservation_date.toString(),
        parkingName: parkingRequestGr.parking_name.name.toString(),
        sysId: parkingRequestGr.sys_id.toString(),
        reservationExist: true,
      });
    }

    return (data.closestReservation = {
      reservationExist: false,
    });
  }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-05-16 12:51:58</sys_created_on>
        <sys_id>3e756a4c4756421086ea87fe016d43ce</sys_id>
        <sys_mod_count>832</sys_mod_count>
        <sys_name>parking_reservations</sys_name>
        <sys_package display_value="parking" source="x_1230661_parking">2cd57ac74742021086ea87fe016d43c4</sys_package>
        <sys_policy/>
        <sys_scope display_value="parking">2cd57ac74742021086ea87fe016d43c4</sys_scope>
        <sys_update_name>sp_widget_3e756a4c4756421086ea87fe016d43ce</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-09 19:14:50</sys_updated_on>
        <template><![CDATA[<section class="custom-container">
  <h2 class="heading">My Next reservation</h2>
  <ul class="reservation">
    <p
      class="reservation__notfound"
      ng-if="c.initialData.reservationExist == false"
    >
      There are no upcoming reservations for you.
    </p>
    <li
      class="reservation__item"
      ng-if="c.initialData.reservationExist == true"
      id="{{c.initialData.sysId}}"
    >
      <p href="#" class="reservation__item-link">
        <span class="date">{{c.initialData.date}}</span>
        <span class="place">{{c.initialData.parkingName}}</span>
      </p>
      <button
        class="reservation__item-cancel"
        title="Cancel reservation"
        type="button"
        ng-click="c.cancelReservation(c.initialData.sysId)"
      >
        Cancel
      </button>
    </li>
  </ul>

  <div class="actions">
    <a class="primary-btn" href="/parking?id=my_reservations&sysId={{data.currentUserSysId}}" title="Link to all reservations">
      <svg>
        <rect x="0" y="0" fill="none" width="100%" height="100%" />
      </svg>
      My Reservations
    </a>

    <a
      class="secondary-btn"
      href="#"
      title="Create new reservation"
      role="button"
      ng-click="c.openModal()"
    >
      <svg>
        <rect x="0" y="0" fill="none" width="100%" height="100%" />
      </svg>
      New Reservation
    </a>
  </div>

  <dialog class="dialog">
    <div>
      <widget id="requestform"></widget>
    </div>
  </dialog>
</section>
]]></template>
    </sp_widget>
</record_update>
