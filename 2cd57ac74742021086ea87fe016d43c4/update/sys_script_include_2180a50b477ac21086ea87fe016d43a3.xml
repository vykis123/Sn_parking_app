<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1230661_parking.ScriptedRestParkingValidationUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Script include for storing all methods related to validation for parking api.</description>
        <mobile_callable>false</mobile_callable>
        <name>ScriptedRestParkingValidationUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var ScriptedRestParkingValidationUtils = Class.create();
ScriptedRestParkingValidationUtils.prototype = {
    initialize: function() {
		this.parkingErrorUtils = new ScriptedRestParkingErrorUtils();
		this.PARKING_LIST_TABLE = "x_1230661_parking_list";
    },

    /**
     * Validates request data passed in request body
     * 
     * @param {object} requestData
     */
    validateParkingPostRequest: function(requestData) {

		/*************Re-using validation from PATCH method ***************/
		this.validatePatchRequestData(requestData);

		/*************Additional validation for POST ***************/
		const {parkingName, parkingLocation, parkingSlots} = requestData;

        if (!parkingName || parkingName.trim() === "") {
            throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking name can't be empty!"));
        }

        if (!parkingLocation || parkingLocation.trim() === "") {
            throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingLocation.", "Parking location can't be empty!"));
        }

        if (!parkingSlots) {
            throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingSlots.", "Parking slots can't be empty!"));
        }

        /***********Check if parking already exists with this name*****************/
        const parkingListGr = new GlideRecord(this.PARKING_LIST_TABLE);
        parkingListGr.addQuery("name", parkingName);
        parkingListGr.setLimit(1);
        parkingListGr.query();

        if (parkingListGr.next()) {
            throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking already exists with this name!"));
        }
    },

	/**
	 * Validates request data
	 * 
	 * @param {object} requestData
	 */
    validatePatchRequestData: function(requestData) {
        const specialChars = /[`!@#$%^&*()_\-+=\[\]{};':"\\|,.<>\/?~ ]/;
        const specialCharsForLocation = /[`!@#$%^&*()\+=\[\]{};':"\\|<>\/?~]/;
		const acceptedValuesForActive = ["true", "false"];
		const acceptedFields = ["parkingName", "parkingLocation", "parkingSlots", "parkingValid"];

		/*********Cheking if any additional fields are beeing passed in request body *********/

		const requestFieldsArray = Object.keys(requestData);

		for (let i = 0; i < requestFieldsArray.length; i++) {
			if(!acceptedFields.includes(requestFieldsArray[i])){
				throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid request.", "Haha nice try. Use only supported fields!"));
			}
		}


        for (let key in requestData) {
            switch (key) {
                case "parkingName":
                    if (requestData[key].length > 50) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking name should be not longer than 50 chars (spaces included)."));
                    }

                    if (specialCharsForLocation.test(requestData[key])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking name should not contain any special characters. Only letters and numbers."));
                    }
                    break;

                case "parkingLocation":
                    if (requestData[key].length > 150) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingLocation.", "Parking location should be not longer than 150 chars (spaces included)."));
                    }

                    if (specialCharsForLocation.test(requestData[key])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingLocation.", "Parking location should not contain any special characters. Only letters and numbers."));
                    }
                    break;

                case "parkingSlots":
                    if (isNaN(requestData[key])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingSlots.", "Parking slots should be a number!"));
                    }
                    break;

				case "parkingValid":
					
                    if (!acceptedValuesForActive.includes(requestData[key])) {
                        throw (this.parkingErrorUtils.buildErrorResponse(400, "Invalid parkingValid.", "Parking valid should be a boolean!"));
                    }
                    break;
				default:
					return;

            }
        }
      
    },

    type: 'ScriptedRestParkingValidationUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-19 12:04:08</sys_created_on>
        <sys_id>2180a50b477ac21086ea87fe016d43a3</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>ScriptedRestParkingValidationUtils</sys_name>
        <sys_package display_value="parking" source="x_1230661_parking">2cd57ac74742021086ea87fe016d43c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="parking">2cd57ac74742021086ea87fe016d43c4</sys_scope>
        <sys_update_name>sys_script_include_2180a50b477ac21086ea87fe016d43a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-19 07:33:10</sys_updated_on>
    </sys_script_include>
</record_update>
