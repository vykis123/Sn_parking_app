<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1230661_parking.ScriptedRestParkingValidationUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ScriptedRestParkingValidationUtils</name>
        <script><![CDATA[var ScriptedRestParkingValidationUtils = Class.create();
ScriptedRestParkingValidationUtils.prototype = {
    initialize: function() {
    },

	/**
	 * Validates request data passed in request body
	 * 
	 * @param {string} parkingName
	 * @param {string} parkingLocation
	 * @param {number} parkingSlots
	 */
	validateParkingPostRequest: function(parkingName, parkingLocation, parkingSlots) {
		const parkingErrorUtils = new ScriptedRestParkingErrorUtils();

		if(!parkingName || parkingName.trim() === "") {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking name can't be empty!"));
		}

		if(parkingName.length > 50) {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking name should be not longer than 50 chars (spaces included)."));
		}

		if(!parkingLocation || parkingLocation.trim() === "") {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingLocation.", "Parking location can't be empty!"));
		}

		if(!parkingSlots || parkingSlots.trim() === "") {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingSlots.", "Parking slots can't be empty!"));
		}

		if(isNaN(parkingSlots)) {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingSlots.", "Parking slots should be a number!"));
		}

		//Check if parking already exists with this name
		const parkingListGr = new GlideRecord("x_1230661_parking_list");
		parkingListGr.addQuery("name", parkingName);
		parkingListGr.setLimit(1);
		parkingListGr.query();

		if(parkingListGr.next()) {
			throw (parkingErrorUtils.buildErrorResponse(400, "Invalid parkingName.", "Parking already exists with this name!"));
		}
	},

    type: 'ScriptedRestParkingValidationUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-19 12:04:08</sys_created_on>
        <sys_id>2180a50b477ac21086ea87fe016d43a3</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>ScriptedRestParkingValidationUtils</sys_name>
        <sys_package display_value="parking" source="x_1230661_parking">2cd57ac74742021086ea87fe016d43c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="parking">2cd57ac74742021086ea87fe016d43c4</sys_scope>
        <sys_update_name>sys_script_include_2180a50b477ac21086ea87fe016d43a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-19 12:13:41</sys_updated_on>
    </sys_script_include>
</record_update>
